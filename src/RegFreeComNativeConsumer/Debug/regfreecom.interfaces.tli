// Created by Microsoft (R) C/C++ Compiler Version 10.00.40219.01 (b1929a14).
//
// c:\ci\co\commonoffice\src\nregfreecom\src\regfreecomnativeconsumer\debug\regfreecom.interfaces.tli
//
// Wrapper implementations for Win32 type library ..\..\build\Debug\RegFreeCom.Interfaces.tlb
// compiler-generated file created 03/17/13 at 17:49:32 - DO NOT EDIT!

#pragma once

//
// interface ISimpleObject wrapper method implementations
//

inline float ISimpleObject::GetFloatProperty ( ) {
    float _result = 0;
    HRESULT _hr = get_FloatProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISimpleObject::PutFloatProperty ( float pRetVal ) {
    HRESULT _hr = put_FloatProperty(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISimpleObject::HelloWorld ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_HelloWorld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISimpleObject::GetProcessThreadID ( unsigned long * processId, unsigned long * threadId ) {
    HRESULT _hr = raw_GetProcessThreadID(processId, threadId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISimpleObject::GetProcName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProcName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface IRegFreeCom wrapper method implementations
//

inline _bstr_t IRegFreeCom::GetString ( long number ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x60020000, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0003", number);
    return _bstr_t(_result, false);
}

//
// dispinterface ISimpleObjectEvents wrapper method implementations
//

inline HRESULT ISimpleObjectEvents::FloatPropertyChanging ( float NewValue, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004\x400b", NewValue, Cancel);
}

//
// interface IRegFreeComRotClass wrapper method implementations
//

inline float IRegFreeComRotClass::GetFloatProperty ( ) {
    float _result = 0;
    HRESULT _hr = get_FloatProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRegFreeComRotClass::PutFloatProperty ( float pRetVal ) {
    HRESULT _hr = put_FloatProperty(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRegFreeComRotClass::GetProcName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProcName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ISimpleObjectPtr IRegFreeComRotClass::Create ( ) {
    struct ISimpleObject * _result = 0;
    HRESULT _hr = raw_Create(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISimpleObjectPtr(_result, false);
}

inline SAFEARRAY * IRegFreeComRotClass::Execute ( SAFEARRAY * request ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Execute(request, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILoadedByManagedImplementedByNative wrapper method implementations
//

inline HRESULT ILoadedByManagedImplementedByNative::Set ( long data ) {
    HRESULT _hr = raw_Set(data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ILoadedByManagedImplementedByNative::Get ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Get(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}
